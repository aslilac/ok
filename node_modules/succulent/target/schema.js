"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schema = void 0;
class Schema {
    static check(base, x) {
        if (base instanceof Schema) {
            return base.check(x);
        }
        return new Schema(base).check(x);
    }
    static every(base, predicate) {
        return Array.from(Schema.from(base)).every(predicate);
    }
    static from(base) {
        if (base instanceof Schema) {
            return base;
        }
        return new Schema(base);
    }
    /**
     * A method used to check if a given value matches the schema
     */
    check;
    /**
     * Used to iterate through all possible values accepted by the schema,
     * for certain finite types
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function, class-methods-use-this
    [Symbol.iterator] = function* () { };
    constructor(base, iter) {
        // Constructing a Schema from a previous Schema, just copy
        if (base instanceof Schema) {
            this.check = base.check;
            this[Symbol.iterator] = iter ?? base[Symbol.iterator];
            return;
        }
        // Constructing a Schema from a FunctionSchema
        else if (typeof base === "function") {
            this.check = base;
            if (iter)
                this[Symbol.iterator] = iter;
            return;
        }
        // Constructing a Schema from a LiteralSchema
        this.check = (x) => Object.is(x, base);
        this[Symbol.iterator] =
            iter ??
                function* () {
                    yield base;
                };
    }
    that(...filters) {
        return new Schema((x) => this.check(x) && filters.every((filter) => filter(x)));
    }
}
exports.Schema = Schema;
//# sourceMappingURL=schema.js.map