"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$Float64Array = exports.$Float32Array = exports.$BigUint64Array = exports.$Uint32Array = exports.$Uint16Array = exports.$Uint8ClampedArray = exports.$Uint8Array = exports.$BigInt64Array = exports.$Int32Array = exports.$Int16Array = exports.$Int8Array = exports.$url = exports.$regexp = exports.$error = exports.$date = exports.$maybe = exports.$optional = exports.$nullish = exports.$falsy = exports.$literal = exports.a = exports.$instanceof = void 0;
const schema_1 = require("../schema");
const operators_1 = require("../operators");
// eslint-disable-next-line @typescript-eslint/ban-types
function $instanceof(t) {
    return new schema_1.Schema((x) => x instanceof t);
}
exports.$instanceof = $instanceof;
/**
 * Alias for $instanceof, i.e. checks if a value is "a"/an `T`
 */
exports.a = $instanceof;
function $literal(t) {
    // @ts-expect-error - This should be fine, because LiteralSchema is a
    // valid type to pass, but TypeScript is unhappy
    return new schema_1.Schema(t);
}
exports.$literal = $literal;
exports.$falsy = new schema_1.Schema((x) => !x);
exports.$nullish = new schema_1.Schema((x) => x == null);
function $optional(schema) {
    return (0, operators_1.union)(schema, undefined);
}
exports.$optional = $optional;
function $maybe(schema) {
    return (0, operators_1.union)(schema, exports.$nullish);
}
exports.$maybe = $maybe;
exports.$date = $instanceof(Date);
exports.$error = $instanceof(Error);
exports.$regexp = $instanceof(RegExp);
exports.$url = $instanceof(URL);
exports.$Int8Array = $instanceof(Int8Array);
exports.$Int16Array = $instanceof(Int16Array);
exports.$Int32Array = $instanceof(Int32Array);
exports.$BigInt64Array = $instanceof(BigInt64Array);
exports.$Uint8Array = $instanceof(Uint8Array);
exports.$Uint8ClampedArray = $instanceof(Uint8ClampedArray);
exports.$Uint16Array = $instanceof(Uint16Array);
exports.$Uint32Array = $instanceof(Uint32Array);
exports.$BigUint64Array = $instanceof(BigUint64Array);
exports.$Float32Array = $instanceof(Float32Array);
exports.$Float64Array = $instanceof(Float64Array);
//# sourceMappingURL=misc.js.map