import { Schema } from "../schema";
import { union } from "../operators";
// eslint-disable-next-line @typescript-eslint/ban-types
export function $instanceof(t) {
    return new Schema((x) => x instanceof t);
}
/**
 * Alias for $instanceof, i.e. checks if a value is "a"/an `T`
 */
export const a = $instanceof;
export function $literal(t) {
    // @ts-expect-error - This should be fine, because LiteralSchema is a
    // valid type to pass, but TypeScript is unhappy
    return new Schema(t);
}
export const $falsy = new Schema((x) => !x);
export const $nullish = new Schema((x) => x == null);
export function $optional(schema) {
    return union(schema, undefined);
}
export function $maybe(schema) {
    return union(schema, $nullish);
}
export const $date = $instanceof(Date);
export const $error = $instanceof(Error);
export const $regexp = $instanceof(RegExp);
export const $url = $instanceof(URL);
export const $Int8Array = $instanceof(Int8Array);
export const $Int16Array = $instanceof(Int16Array);
export const $Int32Array = $instanceof(Int32Array);
export const $BigInt64Array = $instanceof(BigInt64Array);
export const $Uint8Array = $instanceof(Uint8Array);
export const $Uint8ClampedArray = $instanceof(Uint8ClampedArray);
export const $Uint16Array = $instanceof(Uint16Array);
export const $Uint32Array = $instanceof(Uint32Array);
export const $BigUint64Array = $instanceof(BigUint64Array);
export const $Float32Array = $instanceof(Float32Array);
export const $Float64Array = $instanceof(Float64Array);
//# sourceMappingURL=misc.js.map