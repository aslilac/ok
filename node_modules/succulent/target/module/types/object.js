import { Schema } from "../schema";
const hasOwn = (target, prop) => ({}.hasOwnProperty.call(target, prop));
export const $anyobject = new Schema((x) => typeof x === "object" && x != null);
export function $object(template) {
    return new Schema((x) => typeof x === "object" &&
        x != null &&
        Reflect.ownKeys(template).every((key) => 
        // @ts-expect-error - Can't quite get these types
        Schema.check(template[key], x[key])));
}
export function $exact(template) {
    return new Schema((x) => typeof x === "object" &&
        x != null &&
        Reflect.ownKeys(x).every((key) => hasOwn(template, key)) &&
        Reflect.ownKeys(template).every((key) => 
        // @ts-expect-error - Can't quite get these types
        Schema.check(template[key], x[key])));
}
//# sourceMappingURL=object.js.map