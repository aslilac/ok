import { LiteralSchema, Schema } from "../schema";
export declare function $instanceof<T extends Function>(t: T): Schema<T["prototype"]>;
/**
 * Alias for $instanceof, i.e. checks if a value is "a"/an `T`
 */
export declare const a: typeof $instanceof;
export declare function $literal<T extends LiteralSchema>(t: T): Schema<T>;
export declare type falsy = false | 0 | 0n | "" | nullish;
export declare type nullish = undefined | null;
export declare const $falsy: Schema<falsy>;
export declare const $nullish: Schema<nullish>;
export declare function $optional<T>(schema: Schema<T>): Schema<T | undefined>;
export declare function $maybe<T>(schema: Schema<T>): Schema<T | nullish>;
export declare const $date: Schema<Date>;
export declare const $error: Schema<Error>;
export declare const $regexp: Schema<RegExp>;
export declare const $url: Schema<URL>;
export declare const $Int8Array: Schema<Int8Array>;
export declare const $Int16Array: Schema<Int16Array>;
export declare const $Int32Array: Schema<Int32Array>;
export declare const $BigInt64Array: Schema<BigInt64Array>;
export declare const $Uint8Array: Schema<Uint8Array>;
export declare const $Uint8ClampedArray: Schema<Uint8ClampedArray>;
export declare const $Uint16Array: Schema<Uint16Array>;
export declare const $Uint32Array: Schema<Uint32Array>;
export declare const $BigUint64Array: Schema<BigUint64Array>;
export declare const $Float32Array: Schema<Float32Array>;
export declare const $Float64Array: Schema<Float64Array>;
